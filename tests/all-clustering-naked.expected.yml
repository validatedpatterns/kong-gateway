---
# Source: kong-clustering/templates/post-deploy-roles.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong-clustering-gitops
  namespace: test
---
# Source: kong-clustering/templates/post-deploy-cp.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: test
  name: kong-clustering-cp-post-deploy
data:
  post-deploy.sh: |
    #!/bin/bash
    set -eu
    argocd login --username admin \
      $(oc get routes -n unmanaged- -gitops-server -otemplate='{{ .spec.host }}') \
      --password $(oc get secret -n unmanaged- -gitops-cluster -ojsonpath='{.data.admin\.password}' | base64 -d) \
      --insecure \
      --grpc-web
    argocd app patch-resource kong-cp \
      --namespace kong \
      --kind Deployment \
      --resource-name kong-cp-kong \
      --patch "{\"spec\": { \"template\" : { \"spec\" : {\"containers\":[{\"name\":\"proxy\",\"env\": [{ \"name\" : \"KONG_ADMIN_API_URI\", \"value\": \"$(oc get route -n kong  kong-cp-kong-admin -ojsonpath='{.spec.host}')\" }]}]}}}}"  --patch-type 'application/strategic-merge-patch+json'
---
# Source: kong-clustering/templates/post-deploy-dp.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: test
  name: kong-clustering-dp-post-deploy
data:
  post-deploy.sh: |
    #!/bin/bash
    set -eu
    argocd login --username admin \
      $(oc get routes -n unmanaged- -gitops-server -otemplate='{{ .spec.host }}') \
      --password $(oc get secret -n unmanaged- -gitops-cluster -ojsonpath='{.data.admin\.password}' | base64 -d) \
      --insecure \
      --grpc-web
    if ! oc get cm -n kong cluster-urls; then
      echo "config map cluster-urls not found"
      exit 1
    fi
    if ! oc get appprojects -n unmanaged- dataplane; then
      echo "dataplane project cannot be retrieved"
      exit 1
    fi

    # for establishing kong clusters
    CP_CLUSTER_URL=$(oc get cm cluster-urls -n kong -o jsonpath='{.data.CLUSTER_URL}')
    argocd app patch-resource kong-dp \
      --namespace kong \
      --kind Deployment \
      --resource-name kong-dp-kong \
      --patch "{\"spec\": { \"template\" : { \"spec\" : {\"containers\":[{\"name\":\"proxy\",\"env\": [{ \"name\" : \"KONG_CLUSTER_CONTROL_PLANE\", \"value\": \"$CP_CLUSTER_URL:8005\" }, { \"name\" : \"KONG_CLUSTER_TELEMETRY_ENDPOINT\", \"value\": \"$CP_CLUSTER_URL:8006\" }]}]}}}}"  \
      --patch-type 'application/strategic-merge-patch+json'
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-jobs
rules:
  - verbs:
      - get
    apiGroups:
      - route.openshift.io
    resources:
      - routes
  - apiGroups:
      - argoproj.io
    resources:
      - appprojects
    verbs:
      - get
  - verbs:
      - create
      - get
    apiGroups:
      - ''
    resources:
      - secrets
      - configmaps
      - services
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-jobs-cluster-binding
subjects:
  - kind: ServiceAccount
    namespace: test
    name: kong-clustering-gitops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kong-clustering-jobs
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-role
  namespace: test
rules:
  - apiGroups:
      - security.openshift.io
    resourceNames:
      - anyuid
    resources:
      - securitycontextconstraints
    verbs:
      - use
---
# Source: kong-clustering/templates/post-deploy-roles.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kong-clustering-jobs-binding
  namespace: test
subjects:
  - kind: ServiceAccount
    name: kong-clustering-gitops
    namespace: test
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kong-clustering-role
---
# Source: kong-clustering/templates/post-deploy-cp.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: test
  name: kong-clustering-cp-post-deploy
spec:
  backoffLimit: 20
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: kong-clustering-gitops
      volumes:
      - name: post-deploy
        configMap:
          name: kong-clustering-cp-post-deploy
          defaultMode: 0711 
      containers:
      - image: quay.io/ecosystem-appeng/argocd-helper:1.0
        name: post-deploy
        resources: {}
        volumeMounts:
        - name: post-deploy
          mountPath: /opt/scripts
        securityContext:
           runAsUser: 0
        command: ["sh","-c","/opt/scripts/post-deploy.sh"]
---
# Source: kong-clustering/templates/post-deploy-dp.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: test
  name: kong-clustering-dp-post-deploy
  generateName: path-kong-clustering
spec:
  backoffLimit: 20
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: kong-clustering-gitops
      volumes:
      - name: post-deploy
        configMap:
          name: kong-clustering-dp-post-deploy 
          defaultMode: 0711 
      containers:
      - image: quay.io/ecosystem-appeng/argocd-helper:1.0
        name: post-deploy
        resources: {}
        volumeMounts:
        - name: post-deploy
          mountPath: /opt/scripts
        securityContext:
           runAsUser: 0
        command: ["sh","-c","/opt/scripts/post-deploy.sh"]
